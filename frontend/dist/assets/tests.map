{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","frontend/tests/app.lint-test.js","frontend/tests/test-helper.js","frontend/tests/tests.lint-test.js","frontend/tests/unit/models/sensor-data-test.js","frontend/tests/unit/routes/dashboard-test.js","frontend/tests/unit/serializers/application-test.js","frontend/tests/unit/serializers/sensor-data-test.js","frontend/tests/unit/services/server-event-handler-test.js","frontend/tests/unit/services/websocket-handler-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('frontend/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/chart-canvas.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/chart-canvas.js should pass ESLint\\n\\n11:22 - Use import { A } from \\'@ember/array\\'; instead of using Ember.A (ember/new-module-imports)\\n12:24 - Use import { A } from \\'@ember/array\\'; instead of using Ember.A (ember/new-module-imports)\\n13:29 - Use import { A } from \\'@ember/array\\'; instead of using Ember.A (ember/new-module-imports)\\n14:30 - Use import { A } from \\'@ember/array\\'; instead of using Ember.A (ember/new-module-imports)\\n28:5 - Do not use global `$` or `jQuery` (ember/no-global-jquery)\\n28:5 - \\'$\\' is not defined. (no-undef)\\n29:7 - Don\\'t use jQuery without Ember Run Loop (ember/jquery-ember-run)\\n32:5 - Do not use global `$` or `jQuery` (ember/no-global-jquery)\\n32:5 - \\'$\\' is not defined. (no-undef)\\n33:7 - Don\\'t use jQuery without Ember Run Loop (ember/jquery-ember-run)\\n45:22 - \\'Chart\\' is not defined. (no-undef)\\n102:3 - Duplicate key \\'willDestroyElement\\'. (no-dupe-keys)');\n  });\n\n  QUnit.test('models/sensor-data.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/sensor-data.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/dashboard.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/dashboard.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('serializers/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('serializers/sensor-data.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/sensor-data.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('services/server-event-handler.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'services/server-event-handler.js should pass ESLint\\n\\n16:7 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('services/websocket-handler.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'services/websocket-handler.js should pass ESLint\\n\\n16:7 - Unexpected console statement. (no-console)\\n20:7 - Unexpected console statement. (no-console)\\n50:7 - Unexpected console statement. (no-console)');\n  });\n});","define('frontend/tests/test-helper', ['frontend/app', 'frontend/config/environment', '@ember/test-helpers', 'ember-qunit'], function (_app, _environment, _testHelpers, _emberQunit) {\n  'use strict';\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n\n  (0, _emberQunit.start)();\n});","define('frontend/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/sensor-data-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/sensor-data-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/dashboard-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/dashboard-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/serializers/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/application-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/serializers/sensor-data-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/sensor-data-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/services/server-event-handler-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/server-event-handler-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/services/websocket-handler-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/websocket-handler-test.js should pass ESLint\\n\\n');\n  });\n});","define('frontend/tests/unit/models/sensor-data-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Model | sensor data', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let model = Ember.run(() => store.createRecord('sensor-data', {}));\n      assert.ok(model);\n    });\n  });\n});","define('frontend/tests/unit/routes/dashboard-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | dashboard', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:dashboard');\n      assert.ok(route);\n    });\n  });\n});","define('frontend/tests/unit/serializers/application-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Serializer | application', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let serializer = store.serializerFor('application');\n\n      assert.ok(serializer);\n    });\n\n    (0, _qunit.test)('it serializes records', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let record = Ember.run(() => store.createRecord('application', {}));\n\n      let serializedRecord = record.serialize();\n\n      assert.ok(serializedRecord);\n    });\n  });\n});","define('frontend/tests/unit/serializers/sensor-data-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Serializer | sensor data', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let serializer = store.serializerFor('sensor-data');\n\n      assert.ok(serializer);\n    });\n\n    (0, _qunit.test)('it serializes records', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let record = Ember.run(() => store.createRecord('sensor-data', {}));\n\n      let serializedRecord = record.serialize();\n\n      assert.ok(serializedRecord);\n    });\n  });\n});","define('frontend/tests/unit/services/server-event-handler-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Service | server_event_handler', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let service = this.owner.lookup('service:server-event-handler');\n      assert.ok(service);\n    });\n  });\n});","define('frontend/tests/unit/services/websocket-handler-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Service | websocket-handler', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let service = this.owner.lookup('service:websocket-handler');\n      assert.ok(service);\n    });\n  });\n});","define('frontend/config/environment', [], function() {\n  var prefix = 'frontend';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('frontend/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}